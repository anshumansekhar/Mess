/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package MessApp;

import java.awt.print.PrinterException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.MessageFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

/**
 *
 * @author Anshuman-HP
 */
public class ListFrame extends javax.swing.JFrame {

    /**
     * Creates new form ListFrame
     */
    public ListFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        listTable = new javax.swing.JTable();
        getList = new javax.swing.JButton();
        Print = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        listTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Name", "Mobile Number", "Address", "Amount", "Veg/Non-Veg"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(listTable);

        getList.setText("GetList");
        getList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getListActionPerformed(evt);
            }
        });

        Print.setText("Print");
        Print.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrintActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addComponent(getList)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Print)
                .addGap(86, 86, 86))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 596, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(getList)
                    .addComponent(Print))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void PrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrintActionPerformed
        try {
            // TODO add your handling code here:
            // TODO add header and footer
            listTable.print();
        } catch (PrinterException ex) {
            Logger.getLogger(ListFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_PrintActionPerformed

    private void getListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getListActionPerformed
                                               
              
                // TODO add your handling code here:
                String[] dayChoices = { "Today", "Tommorow" };
                String dayInput = (String) JOptionPane.showInputDialog(null, "Choose ","For", JOptionPane.QUESTION_MESSAGE, null,dayChoices,dayChoices[1]);
                System.out.println(dayInput);
                java.sql.Date dateInput;
                if(dayInput.equals("Today")){
                    DateFormat format=new SimpleDateFormat("dd-MM-yyyy");
                    Calendar cal=Calendar.getInstance();
                    dateInput=new java.sql.Date(cal.getTime().getTime());
                }
                else {
                    DateFormat format=new SimpleDateFormat("dd-MM-yyyy");
                    Calendar cal=Calendar.getInstance();
                    cal.add(Calendar.DAY_OF_YEAR, 1);
                    dateInput=new java.sql.Date(cal.getTime().getTime());
                }
                
                
                String[] mealTypeChoices = { "breakfast", "lunch", "dinner" };
                String mealInput = (String) JOptionPane.showInputDialog(null, "Choose ","Meal Type", JOptionPane.QUESTION_MESSAGE, null,mealTypeChoices,mealTypeChoices[1]);
                System.out.println(mealInput);
                System.out.println(dateInput);
                
                try {
                    String condition1="customerdetails.name=name";
                    String conditon2="customerdetails.address=address";
                    String condtion3="NOT "+mealInput;
                    String condition34=mealInput+" AND (fromdate < #"+dateInput+"# < todate)";
                    String condition4=mealInput+" AND (#"+dateInput+"#  BETWEEN fromdate  AND todate )";
                    String query="select * from customerdetails cancel  where "+mealInput+" AND name IN(select name from cancel where NOT "+mealInput+" OR ("+mealInput+" AND (('"+dateInput+"'BETWEEN fromdate AND todate) OR fromdate IS NULL OR todate IS NULL)) )";
                    String query1="select * from customerdetails where ("+mealInput+" AND (EXISTS(select name,address from cancel where ((customerdetails.name=cancel.name) AND (customerdetails.address=cancel.address) AND ((NOT "+mealInput+"))))))";
                    String query2="select * from customerdetails where ("+mealInput+") AND (EXISTS(select name,address from cancel where ("+conditon2+") AND ("+condition1+") AND (("+condtion3+") OR ( NOT "+condition4+"))))";
                    //
                    String condtion31="NOT cancel."+mealInput;
                    String condition41="cancel."+mealInput+" AND (#"+dateInput+"#  BETWEEN cancel.fromdate  AND cancel.todate )";

                    String query5="select * from customerdetails where ("+mealInput+") AND (EXISTS(select name,address from cancel where ("+conditon2+") AND ("+condition1+") AND (("+condtion3+") OR (  "+condition4+"))))";

                    String query3="select fromdate,todate from cancel";
                    
                    String queryJoin="select * from customerdetails LEFT JOIN cancel ON (customerdetails.name = cancel.name AND customerdetails.address=cancel.address) where ("+mealInput+" AND (("+condtion31+") OR ("+condition41+")) )";
                    ResultSet listSet3=MainFrame.DBconn.createStatement().executeQuery(query3);
                    
                    while(listSet3.next()){
                        System.out.println(listSet3.getDate("fromdate").getClass().getName());
                        System.out.println(listSet3.getDate("todate").getClass().getName());

                    }
                    
                    String finalQuery="SELECT * from customerdetails LEFT JOIN cancel "+
                            " ON (customerdetails.name=cancel.name AND customerdetails.address=cancel.address) "+
                            " WHERE ((customerdetails."+mealInput+
                            " AND (cancel.name IS NULL)) "+
                            " OR((customerdetails."+mealInput+
                            " AND ((NOT cancel."+mealInput+
                            " )OR(cancel."+mealInput+
                            " AND NOT (#"+dateInput+"#"+
                            " between (cancel.fromdate-1) AND cancel.todate))))))";

                    //OR ("+mealInput+" AND (('"+dateInput+"'BETWEEN fromdate AND todate) OR fromdate IS NULL OR todate IS NULL))))))";
                    ResultSet listSet=MainFrame.DBconn.createStatement().executeQuery(finalQuery);
                    DefaultTableModel model = (DefaultTableModel) listTable.getModel();
                    model.setNumRows(0);
                    System.out.println(finalQuery);
                    while(listSet.next()){
                        Vector row = new Vector();
                        row.add(listSet.getString("name"));
                        row.add(listSet.getLong("mobilenumber"));
                        row.add(listSet.getString("address"));
                        row.add(listSet.getInt("Amount"));
                        row.add(listSet.getString("Veg_NonVeg"));
                        model.addRow(row);
                    }
                } catch (SQLException ex) {
                    
                    Logger.getLogger(ListFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                
                
            
                
 
        

    }//GEN-LAST:event_getListActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ListFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ListFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ListFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ListFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ListFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Print;
    private javax.swing.JButton getList;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable listTable;
    // End of variables declaration//GEN-END:variables
}
